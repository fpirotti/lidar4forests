# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LidarForForest
                                 A QGIS plugin
 This plugin links lidar processes via the LidR R package to QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-21
        copyright            : (C) 2024 by Francesco Pirotti, Larissa Falcao Granja
        email                : francesco.pirotti@unipd.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francesco Pirotti, Larissa Falcao Granja'
__date__ = '2024-03-21'
__copyright__ = '(C) 2024 by Francesco Pirotti, Larissa Falcao Granja'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import contextlib
import os
import qgis.gui
import sys
import platform
import subprocess
import inspect
import time

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
from qgis.utils import iface
from PyQt5.QtWidgets import (QFileDialog, QDialog, QVBoxLayout, QMessageBox, QLabel)
from qgis.core import (QgsProcessingAlgorithm,
                       QgsSettings,
                       QgsMessageLog,
                       QgsApplication,
                       Qgis)
try:
    import rpy2
except ModuleNotFoundError:
    dlg = QMessageBox(iface.mainWindow())
    dlg.setIcon(QMessageBox.Warning)
    dlg.setText("Library rpy2 not found, installing it using pip!")
    dlg.addButton("Understood", QMessageBox.AcceptRole)
    dlg.show()
    QgsMessageLog.logMessage("Library rpy2 not found, installing it using pip!", level=Qgis.Critical)



RsessionProcess = None
R_HOME = None



class Rsession(object):
    def __init__(self):
        self.iface = iface
        self.checkRfilePath()

    def giveCommand(self,  rcommand):


        if RsessionProcess is not None:

            RsessionProcess.stdin.write(rcommand.encode())
            RsessionProcess.stdin.flush()
            #for line in stdout_iterator:
            for line in RsessionProcess.stdout:
                # Do stuff with line
                #print(len(line))
                #print(len(line.strip()))
                print(line.strip())
                if len(line) == 4 and len(line.strip()) == 1:
                    print(line.strip()[0])
                    break

            QgsMessageLog.logMessage( str(line.strip()),   level=Qgis.Success)
            # QgsMessageLog.logMessage(out2, level=Qgis.Success)
        else:
            out = "R session not running!"
            print(out)
            QgsMessageLog.logMessage(out, level=Qgis.Critical)


    def stopRsession(self):
        global RsessionProcess
        print(f"stopping session!")
        if RsessionProcess:
            isrunning =  self.is_running()
            if isrunning:
                self.giveCommand("quit(\"no\")\n")
                print(f"\nkilling session!")
                RsessionProcess.kill()
            else:
                QgsMessageLog.logMessage \
                    ("R session seems to be not running - not stopping!",
                     level=Qgis.Warning)
                return None

        else:
            QgsMessageLog.logMessage \
                ("R session seems to be NONE - not stopping!",
                 level=Qgis.Warning)
            return None

    def is_running(self):
        global RsessionProcess
        return (RsessionProcess.poll() is None)


    def startRsession(self):
        global RsessionProcess
        print("starting session!")
        exe = os.path.isfile(R_HOME) and os.access(R_HOME, os.X_OK)
        if exe:
            RsessionProcess = subprocess.Popen([R_HOME, "--no-save", "--no-restore"],
                                             stdout=subprocess.PIPE,
                                             stdin=subprocess.PIPE,
                                             stderr=subprocess.STDOUT,
                                             bufsize=0,
                                             shell=True )

            print(f'subprocess started:')

            poll = RsessionProcess.poll()
            if poll is None:
                QgsMessageLog.logMessage("Seems to be running R session!!", level=Qgis.Success)
                print(f"Seems to be running R session!!")
                return R_HOME
            else:
                QgsMessageLog.logMessage \
                    ("R session seems to be not running or able to run, please check your selected R path is correct",
                     level=Qgis.Critical)
                print(f"R session seems to be not running or able to run,")
                return None

        else:
            QgsMessageLog.logMessage(
                "R path seems not to be executable check that your selected path to R executable is correct and that you have permissions",
                level=Qgis.Critical)
            return None

    def getRfilePath(self):
        global R_HOME
        R_HOME = None
        exepath = "/usr/local/bin"
        if platform.system() == "Windows":
            exepath = "C:\\PROGRA~1"

        dialog = QFileDialog(iface.mainWindow(), "Select R executable in your machine", exepath)
        dialog.setFileMode(QFileDialog.ExistingFile)
        dialog.setNameFilter("R executable (R.exe R.*)")
        success = dialog.exec()
        if success:
            selectRexePath = dialog.selectedFiles()
            selectRexePath = selectRexePath[0]
            QgsMessageLog.logMessage(selectRexePath, level=Qgis.Success)
            print(selectRexePath)
            s = QgsSettings()
            s.setValue("lidar4forests/R_HOME", selectRexePath)
            R_HOME = s.value("lidar4forests/R_HOME", selectRexePath)
            return R_HOME
        else:
            R_HOME = None

        return None

    def checkRfilePath(self):
        global R_HOME
        s = QgsSettings()
        R_HOME = s.value("lidar4forests/R_HOME", "")
        exe = os.path.isfile(R_HOME) and os.access(R_HOME, os.X_OK)
        if not exe:
            msg = "Path  " + R_HOME + " should be R executable!"
            QgsMessageLog.logMessage(msg, level=Qgis.Warning)
            self.iface.messageBar().pushMessage("Lidar4Forests: Warning", msg, level=Qgis.Critical)
            R_HOME = self.getRfilePath()
        else:
            self.iface.messageBar().pushMessage("Lidar4Forests: Valid", "Path  " + R_HOME + " is valid!",
                                                level=Qgis.Info)
            os.environ["R_HOME"] = f"C:/Program Files/R/R-4.2.2"
            os.add_dll_directory(r"C:/Program Files/R/R-4.2.2/bin/x64/")
        if RsessionProcess is None:
            self.startRsession()
        else:
            print(f"-----session is RUNNING")