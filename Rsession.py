# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LidarForForest
                                 A QGIS plugin
 This plugin links lidar processes via the LidR R package to QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-21
        copyright            : (C) 2024 by Francesco Pirotti, Larissa Falcao Granja
        email                : francesco.pirotti@unipd.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francesco Pirotti, Larissa Falcao Granja'
__date__ = '2024-03-21'
__copyright__ = '(C) 2024 by Francesco Pirotti, Larissa Falcao Granja'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import qgis.gui
import sys
import platform
import subprocess
import inspect

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
from qgis.utils import iface
from PyQt5.QtWidgets import QFileDialog
from qgis.core import (QgsProcessingAlgorithm,
                       QgsSettings,
                       QgsMessageLog,

                       QgsApplication,
                       Qgis)

RsessionProcess = None
R_HOME = None



class Rsession(object):
    def __init__(self):
        self.iface = iface
        self.checkRfilePath()
        print(R_HOME)
        print(RsessionProcess)

    def giveCommand(self, rcommand):
        if RsessionProcess is not None:
            RsessionProcess.stdin.write((rcommand + "\n").encode())
            print(RsessionProcess)
            print(RsessionProcess.stdin)
            RsessionProcess.stdin.flush()
            out = RsessionProcess.stdout.readline().decode()[:-1]
            QgsMessageLog.logMessage(out, level=Qgis.Success)
        else:
            out = "R session not running"
            QgsMessageLog.logMessage(out, level=Qgis.Warning)

        print(out)

    def stopRsession(self):
        global RsessionProcess
        print("stopping session!")
        if RsessionProcess is not None:
            print("2stopping session!")
            poll = RsessionProcess.poll()
            print(poll)

            RsessionProcess.kill()
            #else:
            #    RsessionProcess.kill()

    def startRsession(self):
        global RsessionProcess
        print("starting session!")
        exe = os.path.isfile(R_HOME) and os.access(R_HOME, os.X_OK)
        if exe:
            RsessionProcess = subprocess.Popen([R_HOME, "--vanilla"],
                                               stdout=subprocess.PIPE,
                                               stdin=subprocess.PIPE,
                                               stderr=subprocess.STDOUT,
                                               shell=True)
            poll = RsessionProcess.poll()
            if poll is None:
                QgsMessageLog.logMessage("Seems to be running R session!!", level=Qgis.Success)
                return R_HOME
            else:
                QgsMessageLog.logMessage \
                    ("R session seems to be not running or able to run, please check your selected R path is correct",
                     level=Qgis.Critical)
                return None

        else:
            QgsMessageLog.logMessage(
                "R path seems not to be executable check that your selected path to R executable is correct and that you have permissions",
                level=Qgis.Critical)
            return None

    def getRfilePath(self):
        global R_HOME
        R_HOME = None
        exepath = "/usr/local/bin"
        if platform.system() == "Windows":
            exepath = "C:\\PROGRA~1"

        dialog = QFileDialog(iface.mainWindow(), "Select R executable in your machine", exepath)
        dialog.setFileMode(QFileDialog.ExistingFile)
        dialog.setNameFilter("R executable (R.exe R.*)")
        success = dialog.exec()
        if success:
            selectRexePath = dialog.selectedFiles()
            selectRexePath = selectRexePath[0]
            QgsMessageLog.logMessage(selectRexePath, level=Qgis.Success)
            print(selectRexePath)
            s = QgsSettings()
            s.setValue("lidar4forests/R_HOME", selectRexePath)
            R_HOME = s.value("lidar4forests/R_HOME", selectRexePath)
            return R_HOME
        else:
            R_HOME = None

        return None

    def checkRfilePath(self):
        global R_HOME
        s = QgsSettings()
        R_HOME = s.value("lidar4forests/R_HOME", "")
        exe = os.path.isfile(R_HOME) and os.access(R_HOME, os.X_OK)
        if not exe:
            msg = "Path  " + R_HOME + " should be R executable!"
            QgsMessageLog.logMessage(msg, level=Qgis.Warning)
            self.iface.messageBar().pushMessage("Lidar4Forests: Warning", msg, level=Qgis.Critical)
            R_HOME = self.getRfilePath()
        else:
            self.iface.messageBar().pushMessage("Lidar4Forests: Valid", "Path  " + R_HOME + " is valid!",
                                                level=Qgis.Info)
        if RsessionProcess is None:
            self.startRsession()