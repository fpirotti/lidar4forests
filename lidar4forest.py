# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LidarForForest
                                 A QGIS plugin
 This plugin links lidar processes via the LidR R package to QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-21
        copyright            : (C) 2024 by Francesco Pirotti, Larissa Falcao Granja
        email                : francesco.pirotti@unipd.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francesco Pirotti, Larissa Falcao Granja'
__date__ = '2024-03-21'
__copyright__ = '(C) 2024 by Francesco Pirotti, Larissa Falcao Granja'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import qgis.gui
import sys
import subprocess
import inspect

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

from qgis.core import (QgsProcessingAlgorithm,
                       QgsSettings,
                       QgsMessageLog,
                       QgsApplication,
                       Qgis)

from .lidar4forest_provider import LidarForForestProvider
from PyQt5.QtWidgets import QFileDialog
if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)
import platform
from qgis.utils import iface

global Rsession
Rsession = None
class LidarForForestPlugin(object):

    def __init__(self, iface):
        self.provider = None
        self.iface = iface
        self.cmd_folder = cmd_folder
        self.R_HOME = None

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = LidarForForestProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def startRsession(self):
        exe = os.path.isfile(self.R_HOME) and os.access(self.R_HOME, os.X_OK)
        if exe:
            Rsession = subprocess.Popen(self.R_HOME)
            poll = Rsession.poll()
            if poll is None:
                QgsMessageLog.logMessage("Seems to be running R session!!", level=Qgis.Success)
                return self.R_HOME
            else:
                QgsMessageLog.logMessage("R session seems to be not running or able to run, please check your selected R path is correct",
                                         level=Qgis.Critical)
                return None

        else:
            QgsMessageLog.logMessage(
                "R path seems not to be executable check that your selected path to R executable is correct and that you have permissions",
                level=Qgis.Critical)
            return None
    def getRfilePath(self):
        exepath = "/usr/local/bin"
        if platform.system() == "Windows":
            exepath = "C:\\PROGRA~1"

        dialog = QFileDialog(iface.mainWindow(),  "Select R executable in your machine", exepath)
        dialog.setFileMode(QFileDialog.ExistingFile)
        dialog.setNameFilter( "R executable (R.exe R.*)" )
        success = dialog.exec()
        if success:
            selectRexePath = dialog.selectedFiles()
            selectRexePath = selectRexePath[0]
            QgsMessageLog.logMessage(selectRexePath, level=Qgis.Success)
            print(selectRexePath)
            s = QgsSettings()
            s.setValue("lidar4forests/R_HOME", selectRexePath)
            self.R_HOME = s.value("lidar4forests/R_HOME", selectRexePath)
            return self.R_HOME
        else:
            msg = "File dialog not able to be created!"
            QgsMessageLog.logMessage(msg, level=Qgis.Warning)
            self.iface.messageBar().pushMessage("Lidar4Forests: Warning", msg, level=Qgis.Critical)
            return None


    def fixRfilePath(self):
        s = QgsSettings()
        self.R_HOME = s.value("lidar4forests/R_HOME", "")
        exe = os.path.isfile(self.R_HOME) and os.access(self.R_HOME, os.X_OK)
        if not exe:
            msg = "Path "+self.R_HOME+" should be R executable!"
            QgsMessageLog.logMessage(msg, level=Qgis.Warning)
            self.iface.messageBar().pushMessage("Lidar4Forests: Warning", msg, level=Qgis.Critical)
            self.R_HOME = self.fixRfilePath()
        else:
            self.iface.messageBar().pushMessage("Lidar4Forests: Valid", "Path "+self.R_HOME+" is valid!", level=Qgis.Info)



    def initGui(self):
        self.initProcessing()

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)
